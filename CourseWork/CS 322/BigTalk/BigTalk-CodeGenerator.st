Object subclass: #BigTalkCodeGenerator	instanceVariableNames: 'stream indentLevel'	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-CodeGenerator'!!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jws 11/18/2024 11:39'!initialize	super initialize.	stream := WriteStream on: ''.	indentLevel := 0.! !!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jpl 12/9/2024 23:29'!visitBTArithmeticOperator: aBTArithmeticOperator 		stream space; nextPutAll: aBTArithmeticOperator opSymbol; space! !!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jpl 12/9/2024 23:27'!visitBTBinaryExpression: aBTBinaryExpression 		aBTBinaryExpression arg1 accept: self.	aBTBinaryExpression operator accept: self.	aBTBinaryExpression arg2 accept: self.! !!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jpl 12/10/2024 01:49'!visitBTRelationalOperator: aBTRelationalOperator 	| coropSymbol |	coropSymbol := aBTRelationalOperator opSymbol = '='		ifTrue: [ '==' ]		ifFalse: [ aBTRelationalOperator opSymbol ].	stream space; nextPutAll: coropSymbol; space.! !!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jpl 12/9/2024 23:27'!visitBTVariableReference: aBTVariableReference 		stream nextPutAll: aBTVariableReference identifier! !!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jpl 12/10/2024 02:42'!visitBTWriteLine: aBTWriteLine 		stream nextPutAll: 'printf("\n");'.! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'jws 11/18/2024 11:47'!lf		stream lf! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'jpl 12/9/2024 18:42'!tabIn	indentLevel := indentLevel + 1! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'jpl 12/10/2024 02:54'!visitBTAssignmentStatement: aBTAssignmentStatement 		stream 		nextPutAll: aBTAssignmentStatement variableId;		nextPutAll: ' = '.	aBTAssignmentStatement expression accept: self.	stream nextPutAll: ';'.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/9/2024 18:42'!indent	stream tab: self indentLevel! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!indentLevel	^ indentLevel! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!indentLevel: anObject	indentLevel := anObject.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!stream	^ stream! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!stream: anObject	stream := anObject.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/9/2024 18:44'!tabOut	indentLevel := indentLevel - 1! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/9/2024 23:30'!visitBTArgumentList: aBTArgumentList 		stream nextPutAll: '('.	aBTArgumentList arguments		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/10/2024 02:56'!visitBTCompoundStatement: aBTCompoundStatement 	aBTCompoundStatement statements do: [:each | 			self indent.			each accept: self.			self lf.		]! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/10/2024 02:31'!visitBTFunction: aBTFunction 	| methodName returnType paramsStr | 	methodName := '_' , (aBTFunction identifier). 	returnType := aBTFunction returnType. 	returnType := (returnType isKindOf: BTIntegerType) 		ifTrue: ['int'] 		ifFalse: [(returnType isKindOf: BTStringType) 			ifTrue: ['char *']]. 		 paramsStr := self generateMethodParametersFor: aBTFunction. 		stream nextPutAll: returnType , ' ' , methodName , '(' , paramsStr , '){'.		self tabIn; indent. 		aBTFunction methodBody accept: self.		self tabOut.		stream nextPutAll: '}'; lf.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/9/2024 23:29'!visitBTFunctionCall: aBTFunctionCall 		stream nextPutAll: aBTFunctionCall identifier.	aBTFunctionCall arguments accept: self! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/10/2024 03:00'!visitBTIfThenElseStatement: aBTIfThenElseStatement 		stream nextPutAll: 'if  ('.	aBTIfThenElseStatement expression accept: self.	stream nextPutAll: ') {'; lf.	self tabIn; indent.	aBTIfThenElseStatement trueStatement accept: self.	self  tabOut; indent.	stream nextPutAll: '} else {'; lf.	self tabIn; indent.	aBTIfThenElseStatement falseStatement accept: self.	self tabOut; indent.	stream nextPutAll: '}'; lf.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/10/2024 01:07'!visitBTMethodBody: aBTMethodBody 	aBTMethodBody variables accept: self. 	stream lf. 	self tabIn; indent. 	aBTMethodBody statement accept: self. 	self tabOut.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/10/2024 03:02'!visitBTParameterList: aBTParameterList 	stream nextPutAll: '('.	aBTParameterList parameters		do: [:each | 			each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/9/2024 18:44'!visitBTStringType: aBTStringType 		stream nextPutAll: 'string'! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jpl 12/9/2024 19:43'!visitBTVariableDeclaration: aBTVariableDeclaration 	| cType | 	cType := (aBTVariableDeclaration type isKindOf: BTIntegerType) 		ifTrue: ['int'] 		ifFalse: [(aBTVariableDeclaration type isKindOf: BTStringType) 			ifTrue: ['char *'] 			ifFalse: ['unknownType']]. 		stream nextPutAll: cType, ' ', aBTVariableDeclaration name, ';'; lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/10/2024 02:34'!visitBTMethods: aBTMethods 		aBTMethods declarations isEmpty		ifTrue: [^self].	stream nextPutAll: '//methods'; lf.	aBTMethods declarations		do: [:each | each accept: self]		separatedBy: [self lf; indent].	self tabOut! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/10/2024 03:08'!visitBTProgram: aBTProgram 	stream nextPutAll: '#include <stdio.h>'; lf.	aBTProgram variables accept: self.	aBTProgram methods accept: self.	stream nextPutAll: '// Program'; lf.	stream nextPutAll: 'int main(int argc, char *argv[]){'; lf.	self tabIn; indent.	aBTProgram statement accept: self.	self tabOut; indent.	stream nextPutAll: '}'; lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/10/2024 03:07'!visitBTVariables: aBTVariables 	aBTVariables declarations isEmpty 		ifTrue: [^self]. 	stream nextPutAll: '//variables'; lf. 	aBTVariables declarations do: [:each | each accept: self] separatedBy: [self lf; indent]. 	self tabOut; 	indent.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/9/2024 18:31'!visitBTliteralInteger: aBTliteralInteger	"stream nextPutAll: '('."	stream nextPutAll: aBTliteralInteger value printString.	"stream nextPutAll: ')'."! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/9/2024 16:52'!visitBTliteralString: aBTliteralString	stream nextPutAll: ''''.	stream nextPutAll: aBTliteralString value.	stream nextPutAll: ''''.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/10/2024 02:31'!visitWriteInteger: aBTWriteInteger 	stream nextPutAll: 'printf("%d", '. 	aBTWriteInteger expression accept: self.	stream nextPutAll: ');'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'jpl 12/10/2024 02:31'!visitWriteString: aBTWriteString 	stream nextPutAll: 'printf("%s", '. 	aBTWriteString  expression accept: self.	stream nextPutAll: ');'.! !!BigTalkCodeGenerator methodsFor: 'as yet unclassified' stamp: 'jpl 12/9/2024 23:57'!generateMethodBodyFor: aBTMethod 	| methodBodyStr | 	methodBodyStr := '{'. aBTMethod body variables accept: self. stream lf. 	aBTMethod body statement accept: self. 	methodBodyStr := methodBodyStr , '}'. 	^methodBodyStr.! !!BigTalkCodeGenerator methodsFor: 'as yet unclassified' stamp: 'jpl 12/9/2024 23:44'!generateMethodParametersFor: aBTMethod 	| paramStr | 	paramStr := ''.	 (aBTMethod parameters) parameters do: [:each | 		| paramName paramType cType | 			paramName := each name. 		paramType := each type. 		cType := (paramType isKindOf: BTIntegerType) 		ifTrue: ['int'] 		ifFalse: [(paramType isKindOf: BTStringType) 			ifTrue: ['char *']]. 		paramStr := paramStr , cType , ' ' , paramName , ', '. ]. 		paramStr := paramStr copyFrom: 1 to: (paramStr size - 2).		^paramStr.! !!BigTalkCodeGenerator methodsFor: 'as yet unclassified' stamp: 'jpl 12/9/2024 23:23'!visitBTIntegerType: aBTIntegerType 		stream nextPutAll: 'integer'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigTalkCodeGenerator class	instanceVariableNames: ''!!BigTalkCodeGenerator class methodsFor: 'code generating' stamp: 'jws 11/18/2024 11:40'!generate: aProgramString	| generator ast |	generator := self new.	ast := BigTalkParser parse: aProgramString.	ast accept: generator.	^generator stream contents! !TestCase subclass: #BigTalkCodeGeneratorTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-CodeGenerator'!!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'jpl 12/9/2024 18:05'!testFormatFactorialProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self factorialProgram.		"self assert: formattedCode = expectedCode."	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'jpl 12/9/2024 18:05'!testFormatNanoIntProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self nanoIntProgram.		"self assert: formattedCode = expectedCode."	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'jpl 12/8/2024 19:21'!testFormatNanoProgram	| formattedCode expectedCode |	formattedCode := BigTalkCodeGenerator generate: self nanoProgram.		"self assert: formattedCode = expectedCode."	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jpl 12/9/2024 19:57'!factorialProgram	^'programvariables	msg : stringmethods	function factorial(n:integer) : integer	do		if n = 0 then			factorial <- 1		else			factorial <- n * factorial( n - 1 )do	[msg <- "Factorial 5 is "	writeString msg	writeInteger factorial(5)	writeLine]' withUnixLineEndings! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jpl 12/9/2024 18:04'!nanoIntProgram	^'programdo	writeInteger 10' withUnixLineEndings.! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:35'!nanoProgram	^'programdo	writeString "Hello, World!!"' withUnixLineEndings! !