Object subclass: #BigTalkSemanticAnalyzer	instanceVariableNames: 'env errors'	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-SemanticAnalyzer'!!BigTalkSemanticAnalyzer methodsFor: 'initialize-release' stamp: 'jws 12/2/2024 11:14'!initialize	super initialize.	env := BTEnvironment new.	errors := OrderedCollection new.! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!env	^ env! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!env: anObject	env := anObject.! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!errors	^ errors! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!errors: anObject	errors := anObject.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/6/2024 09:56'!visitArithmeticOperator: aBTArithmeticOperator    |opSelector|    opSelector := aBTArithmeticOperator opSymbol.    opSelector = #/ ifTrue: [opSelector := #//].    opSelector = #MOD ifTrue: [opSelector := #\\].    ^opSelector.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 16:04'!visitBTArgumentList: aBTArgumentList 	| arguments | 	arguments := OrderedCollection new. 	(aBTArgumentList arguments) do: [:each | 		arguments add: (each accept: self). ].	^arguments.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 14:15'!visitBTAssignmentStatement: aBTAssignmentStatement	| var value |	(env isBound: aBTAssignmentStatement variableId)	ifFalse: [self errors add: BTUndeclaredError new. ^nil].	value := aBTAssignmentStatement expression accept: self.	var := env variable: aBTAssignmentStatement variableId.	(var notNil and: [var ~= value]) 		ifTrue: [self errors add: BTError new].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/6/2024 09:55'!visitBTBinaryExpression: aBTBinaryExpression    |arg1 arg2 opSelector|    arg1 := aBTBinaryExpression arg1 accept self.    arg2 := aBTBinaryExpression arg2 accept self.    opSelector := aBTBinaryExpression operator accept self.    ^arg1 perform: opSelector with: arg2.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 15:58'!visitBTFunction: aBTFunction 	| methodExists paramTypes | 	methodExists := env hasMethod: aBTFunction identifier. 	methodExists 		ifTrue: [ self errors add: BTMultipleDeclarationError new. ]		ifFalse: [ paramTypes := self visitBTParameterList: aBTFunction parameters. 			env declare: aBTFunction identifier method: aBTFunction returnType. ].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 16:02'!visitBTFunctionCall: aBTFunctionCall 	| funcName func args result | 	funcName := aBTFunctionCall identifier. 	(env isBound: funcName) ifFalse: [self errors add: BTUndeclaredError new. ^nil].	func := env method: funcName. 	args := aBTFunctionCall arguments collect: [:each | each accept: self]. 	env activate.	func methodBody accept: self. 	 result := env variable: funcName.	^result get.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 16:04'!visitBTGroupedExpression: aBTGroupedExpression 	^aBTGroupedExpression expression accept: self.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 16:09'!visitBTMethodDeclaration: aBTMethodDeclaration 	| paramTypes methodDec | 	paramTypes := aBTMethodDeclaration parameters parameters collect: [:each | each type]. 	methodDec := BTMethodDeclaration new. 	methodDec parameters: paramTypes. 	methodDec returnType: aBTMethodDeclaration returnType. 	env declare: aBTMethodDeclaration identifier method: methodDec.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:22'!visitBTMethods: aBTMethods 	aBTMethods declarations		do: [:each | each accept: self]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/11/2024 23:20'!visitBTParameterList: aBTParameterList 	| paramTypes |	paramTypes := OrderedCollection new.	aBTParameterList parameters do: [:each |		each accept: self.		paramTypes add: each type.].	^paramTypes! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 16:14'!visitBTProcedureCall: aBTProcedureCall	| procedureName procedure args |	procedureName := aBTProcedureCall identifier.	(env isBound: procedureName)		ifFalse: [self errors add: BTUndeclaredError new. ^nil].	procedure := env method: procedureName.	args := aBTProcedureCall arguments collect: [:each | each accept self].	env activate.	procedure methodBody accept: self.	env deactivate.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:21'!visitBTProgram: aBTProgram 		aBTProgram variables accept: self.	aBTProgram methods accept: self.	aBTProgram statement accept: self.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/11/2024 20:58'!visitBTVariableDeclaration: aBTVariableDeclaration	| variableExists |	variableExists := env hasVariable: aBTVariableDeclaration name.	variableExists ifTrue: [self errors add: BTMultipleDeclarationError new].	[env declare: aBTVariableDeclaration name variable: aBTVariableDeclaration type] on: 	BTMultipleDeclarationError do: [:ex | self errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/12/2024 14:20'!visitBTVariableReference: aBTVariableReference	(env isBound: aBTVariableReference identifier)		ifFalse: [ self errors add: BTUndeclaredError new. ^nil].	^env variable: aBTVariableReference identifier.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:22'!visitBTVariables: aBTVariables 	aBTVariables declarations		do: [:each | each accept: self]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/11/2024 20:10'!visitBTliteralInteger: aBTliteralInteger 		^BTIntegerType default anyValue.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:27'!visitBTliteralString: aBTliteralString 		^BTStringType default anyValue! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jpl 12/11/2024 23:07'!visitWriteInteger: aBTWriteInteger 		[BTIntegerType default checkType: (aBTWriteInteger expression accept: self)]		on: BTError		do: [:ex | self errors add: ex]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:32'!visitWriteString: aBTWriteString 		[BTStringType default checkType: (aBTWriteString expression accept: self)]		on: BTError		do: [:ex | self errors add: ex]! !!BigTalkSemanticAnalyzer methodsFor: 'as yet unclassified' stamp: 'jpl 12/10/2024 11:15'!apply: args to: params 	| argStream paramStream | 	argStream := ReadStream on: args. 	paramStream := ReadStream on: params. 	[argStream atEnd or: [paramStream atEnd]] 		whileFalse: [ | arg param | arg := argStream next. 	param := paramStream next. 	self env at: param put: arg. ]. 	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigTalkSemanticAnalyzer class	instanceVariableNames: ''!!BigTalkSemanticAnalyzer class methodsFor: 'analyzing' stamp: 'jws 12/2/2024 11:16'!analyze: aProgramString	| ast analyzer |	ast := BigTalkParser parse: aProgramString.	analyzer := self new.	ast accept: analyzer.	^analyzer errors! !TestCase subclass: #BigTalkSemanticAnalyzerTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-SemanticAnalyzer'!!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jws 12/2/2024 11:29'!testBadNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoBadProgram.	self deny: errors isEmpty.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jpl 12/11/2024 20:30'!testGoodNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoGoodProgram.	self deny: errors isEmpty.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jpl 12/11/2024 21:05'!testMultMethodDecNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoMultMethodDecProgram.	self deny: errors isEmpty.	self assert: (errors anySatisfy: [:error | error isKindOf: BTMultipleDeclarationError]).! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jws 12/2/2024 11:19'!testNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoProgram.	self assert: errors isEmpty.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jpl 12/12/2024 14:25'!testUndeclaredProcedureNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoUndeclaredProcedureProgram.	self deny: errors isEmpty.	self assert: (errors anySatisfy: [:error | error isKindOf: BTUndeclaredError]).! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jpl 12/12/2024 14:05'!testUndeclaredVariableNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoUndeclaredVariableProgram.	self deny: errors isEmpty.	self assert: (errors anySatisfy: [:error | error isKindOf: BTUndeclaredError]).! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jpl 12/12/2024 14:24'!testUndeclaredVariableRefNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoUndeclaredVariableRefProgram.	self deny: errors isEmpty.	self assert: (errors anySatisfy: [:error | error isKindOf: BTUndeclaredError]).! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jpl 12/11/2024 20:43'!testmultVarDeclaration	| errors |	errors := BigTalkSemanticAnalyzer analyze: self multVarDeclaration.	self deny: errors isEmpty.	self assert: (errors anySatisfy: [:error | error isKindOf: BTMultipleDeclarationError]).! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jpl 12/11/2024 20:40'!multVarDeclaration	^'program		variables			x : integer			x : integer		do			x <- 5'.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:28'!nanoBadProgram	^'program do writeString 42'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jpl 12/11/2024 20:30'!nanoGoodProgram	^'program 		variables			x : integer		do x <- 5'.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jpl 12/11/2024 21:04'!nanoMultMethodDecProgram	^'program 		methods			function test() : integer do test <-1			function test() : integer do test <- 1		do			writeInteger(test())'.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:18'!nanoProgram	^'program do writeString "Hello, World!!"'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jpl 12/12/2024 14:24'!nanoUndeclaredProcedureProgram	^'program 		variables			y : integer		do			test()'.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jpl 12/12/2024 14:04'!nanoUndeclaredVariableProgram	^'program 		variables			y : integer		do			x <- 5'.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jpl 12/12/2024 14:23'!nanoUndeclaredVariableRefProgram	^'program 		variables			y : integer		do			y <- x + 1'.! !